#云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_TARGET:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: false
        type: string
      WRT_SUFFIX:
        required: true
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string
      WRT_KERNEL:
        required: false
        type: string
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_TARGET: ${{inputs.WRT_TARGET}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_SOURCE: ${{inputs.WRT_SOURCE}}
  WRT_SUFFIX: ${{inputs.WRT_SUFFIX}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}

jobs:
  core:
    name: ${{inputs.WRT_SOURCE}} - (${{inputs.WRT_NAME}})
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Values
        run: |
          export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export WRT_CI=$(basename $GITHUB_WORKSPACE)
          export WRT_VER=$(echo $WRT_REPO | cut -d '/' -f 5-)-$WRT_BRANCH
          export WRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Config/$WRT_TARGET-$WRT_SUFFIX.txt)
          echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
          echo "WRT_CI=$WRT_CI" >> $GITHUB_ENV
          echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
          echo "WRT_TYPE=$WRT_TYPE" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/

          cd ./wrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV


      - name: Check Repo Log
        run: |
          cd ./wrt/ 

          VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %h")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' include/kernel-6.6)
          if [[ $WRT_REPO == *"lede"* ]]; then
            VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' include/kernel-6.1)
          fi
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV
          VERSION_LOG=$(git log --since="24 hours ago" --until="now" --pretty=format:"%h %s" --no-merges -- . ':(exclude)scripts/feeds')
          if [ -n "$VERSION_LOG" ] && echo "$VERSION_LOG" | grep -q .; then
            echo "WRT_NEED_COMPILE=true" >> $GITHUB_ENV
          else
            echo "WRT_NEED_COMPILE=false" >> $GITHUB_ENV
            echo "!!!过去24小时内无更新,跳过编译流程!!!"
          fi

      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@main
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* lld* llvm* \
            microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
          remove_packages_one_command: true
          remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
            /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* \
            /usr/local/share/vcpkg/ports/azure* /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* \
            /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* /usr/local/share/vcpkg/ports/snap* \
            /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
            /var/lib/mysql* /var/log/azure*"
          testing: false

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"


      - name: Check Scripts
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Check Caches
        id: check-cache
        if: ${{ env.WRT_TEST != 'true' && env.WRT_NEED_COMPILE == 'true' }}
        uses: actions/cache@main
        with:
          key: ${{env.WRT_TARGET}}-${{env.WRT_VER}}-${{env.WRT_HASH}}
          path: |
            ./wrt/.ccache
            ./wrt/staging_dir/host*
            ./wrt/staging_dir/tool*

      - name: Update Caches
        if: ${{ env.WRT_TEST != 'true' && env.WRT_NEED_COMPILE == 'true' }}
        run: |
          if ${{steps.check-cache.outputs.cache-hit == 'true'}}; then
            sed -i 's/ $(tool.*\/stamp-compile)//g' ./wrt/Makefile
            sed -i 's/ $(tool.*\/stamp-install)//g' ./wrt/Makefile

            echo "toolchain skiped done!"
          else
            gh extension install actions/gh-actions-cache

            CACHE_LIST=$(gh actions-cache list --key "$WRT_TARGET-$WRT_VER" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
               gh actions-cache delete $CACHE_KEY --confirm
            done

            echo "caches cleanup done!"
          fi

      - name: Update Feeds
        run: |
          cd ./wrt/
          $GITHUB_WORKSPACE/Scripts/Feeds.sh

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages
        run: |
          cd ./wrt/package/

          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings
        run: |
          cd ./wrt/

          rm -rf ./tmp* ./.config*
          cat $GITHUB_WORKSPACE/Config/GENERAL.txt $GITHUB_WORKSPACE/Config/$WRT_TARGET-$WRT_SUFFIX.txt >> .config

          $GITHUB_WORKSPACE/Scripts/Settings.sh

          make defconfig -j$(nproc)
          ./scripts/diffconfig.sh > seed.config
          cat seed.config
          
          if [[ "$WRT_KERNEL" == "6.6" ]]; then
            # 删除 target/linux/qualcommax/patches-6.6/ 下包含 ipq5018 或 IPQ5018 的文件
            find target/linux/qualcommax/patches-6.6/ -type f \( -iname "*ipq5018*" -o -iname "*IPQ5018*" \) -exec rm -f {} +
          
            # 修改 target/linux/qualcommax/Makefile 文件中的 KERNEL_PATCHVER
            sed -i 's/^KERNEL_PATCHVER:=.*/KERNEL_PATCHVER:=6.6/' target/linux/qualcommax/Makefile
          fi

      - name: Download Packages
        if: ${{ env.WRT_TEST != 'true' && env.WRT_NEED_COMPILE == 'true' }}
        run: |
          cd ./wrt/
          
          make download -j$(nproc)

      - name: Compile Firmware
        if: ${{ env.WRT_TEST != 'true' && env.WRT_NEED_COMPILE == 'true' }}
        run: |
          cd ./wrt/

          make -j$(nproc) || make -j1 V=s

      - name: Machine Information
        if: ${{ env.WRT_NEED_COMPILE == 'true' }}
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        if: ${{ env.WRT_NEED_COMPILE == 'true' }}
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -f ./.config ./upload/Config_"$WRT_TARGET"_"$WRT_NAME"_"$WRT_VER"_"$WRT_DATE".txt
          cp -f ./seed.config ./upload/Config_"$WRT_TARGET"_"$WRT_NAME"_"$WRT_VER"_"$WRT_DATE".seed.txt

          if [[ $WRT_TEST != 'true' ]]; then
            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$" -exec rm -rf {} +

            for TYPE in $WRT_TYPE ; do
              for FILE in $(find ./bin/targets/ -type f -iname "*$TYPE*.*") ; do
                EXT=$(basename $FILE | cut -d '.' -f 2-)
                NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($TYPE\).*")
                NEW_FILE="$WRT_NAME"_"$WRT_VER"_"$NAME"_"$WRT_DATE"."$EXT"
                mv -f $FILE ./upload/$NEW_FILE
              done
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;
          fi

      - name: Release Firmware
        if: ${{ env.WRT_NEED_COMPILE == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: R${{ env.WRT_DATE }}_${{ env.WRT_NAME }}
          name: R${{ env.WRT_DATE }} for ${{ env.WRT_NAME }}
          files: ./wrt/upload/*.*
          body: |

            **This is ${{ env.WRT_NAME }} OpenWrt Firmware for ${{ env.WRT_TYPE }}**
            ### 📒 固件信息(无WIFI)
            - 🖥️ 这是  ${{ env.WRT_TYPE }} 使用的 OpenWrt 固件
            - 💻 平台: ${{ env.WRT_TARGET }}
            - ⚽ 源码: ${{ env.WRT_SOURCE }}
            - 💝 分支: ${{ env.WRT_BRANCH }}
            - 🌐 地址: **${{ env.WRT_IP }}**
            - 🔑 密码: **${{ env.WRT_PW }}**
            ### 🧊 固件版本
            - 固件内核版本：**${{ env.VERSION_KERNEL }}**
            - 固件编译前最后一次➦[主源码](${{ env.WRT_REPO }})更新记录
            - ${{ env.VERSION_INFO }}



